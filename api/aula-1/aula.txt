
1. Iniciarlizar o projeto
go mod init go-image

2. Adicionar módulos e bibliotecas
go mod tidy

3. Executar a aplicação
go run main.go

4. Testar a aplicação em outro terminal
curl localhost:8080 && echo

---------------------------------------

5. Criar arquivo Dockerfile
touch Dockerfile

# Multistage

FROM golang:1.24rc1-alpine3.21 as stage1

WORKDIR /app

# Copia o go.mod e faz o download das dependências
COPY go.mod go.sum ./
RUN go mod download

# Copia o código da aplicação e compila o binário
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o meuExecutavel

# Estágio 2: Copiar a imagem do stage anterior para a imagem final
FROM scratch

# Copia apenas o binário gerado no stage anterior
COPY --from=stage1 /app/meuExecutavel /

# Define o ponto de entrada para o container como /meuExecutavel
# O binário será executado quando o container for iniciado
ENTRYPOINT [ "/meuExecutavel" ]

---------------------------------------

6. Gerar nova imagem
docker build --tag go-api-otimizada . 

7. Criar container a partir da nova imagem
docker run -d --rm --name goapi -p 8080:8080 go-api-otimizada
